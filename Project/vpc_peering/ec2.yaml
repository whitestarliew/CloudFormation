# test
Parameters:
  EnvType:
    Description: Environment type that we use
    Type: String
    Default: test
    AllowedValues:
      - prod
      - test
  InstanceType:
    Description: Reference for the InstanceType
    Type: String
    Default: t3.micro
    AllowedValues: 
      - t3.micro
      - m4.large
      - t3.medium


#Kindly remember all of the AMI are use Windows Server 2019 Base x86
Mappings:
  AWSRegionForAMI:
  #London
    eu-west-2:
      HVM64: ami-02dd6914ad5bda81d
  #Hong Kong 
    ap-east-1:
      HVM64: ami-09e47bf7ef504dc6a
  #Singapore
    ap-southeast-1:
      HVM64: ami-0526b9747c2c87a0b
  #Sidney  
    ap-southeast-2:
      HVM64: ami-08e49cb12f5231fd8
  AZforMapping:
    eu-west-2:
      AvailabilityZone: eu-west-2a
    ap-east-1:
      AvailabilityZone: ap-east-1a
    ap-southeast-1:
      AvailabilityZone: ap-southeast-1a
    ap-southeast-2:
      AvailabilityZone: ap-southeast-2a


Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', HVM64]
      AvailabilityZone: !FindInMap [AZforMapping, !Ref 'AWS::Region',AvailabilityZone]
      InstanceType: t3.micro
      EbsOptimized: false
      VPC: !Ref VPC1
      Subnet: !Ref 
      SecurityGroups:
        - !Ref SSHSecurityGroup
        # EBS volume setup
      BlockDeviceMappings:
        - DeviceName: /dev/sdc
          Ebs:
            VolumeSize: 15
            VolumeType: gp3
            DeleteOnTermination: "true"
      Tags:
        - Key: Name
          Value: CFTest1
      # UserData:
      #   Fn::Base64: |
      #      #!/bin/bash 
    DependsOn: MyInstance2

        
  MyInstance2:
    Type: AWS::EC2::Instance
    #DeletionPolicy: Retain
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', HVM64] 
      AvailabilityZone: us-east-1d
      InstanceType: t3.micro
      EbsOptimized: false
      SecurityGroups:
        - !Ref SSHSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/sdc
        Ebs:
          VolumeSize: 15
          VolumeType: gp3
          DeleteOnTermination: "true"
      Tags:
        - Key: Name
          Value: Another instance 
      UserData:
        Fn::Base64: |
           #!/bin/bash 
           yum update -y
           sudo yum install -y yum-utils
           sudo yum-config-manager \
             --add-repo \
             https://download.docker.com/linux/centos/docker-ce.repo
           sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin
           sudo systemctl start docker
           sudo docker run hello-world
        
      
      
         #PublicKeyMaterial: String

      #SecurityGroup: !Ref xxxxxxxxxxxxx --> key in the existing security group name
      
   #take note that gp2 cannot make an 'iops' provisioned on this.

  # an elastic IP for our instance
  # MyEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     InstanceId: !Ref MyInstance

  ALBCF:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      LoadBalancerAttributes: 
        - Key: deletion_protection.enabled
          Value: false
      Name: String
      Scheme: String
      SecurityGroups: !Ref SSHSecurityGroup
      SubnetMappings: 
        - SubnetMapping
      Subnets: 
        - us-east-1a
        - us-east-1d
      Tags: 
        - Key: Name
        - Value: ALBCF
      #Type: 
  TargetGroupCF:
     Type: AWS::ElasticLoadBalancingV2::TargetGroup
     Properties: 
       HealthCheckEnabled: True
       IpAddressType: ipv4
       Name: TGCF
       Port: 80
       Protocol: HTTP
       #Target: Please refer to the document        
       TargetType: instance
       VpcId: vpc-329a7f4f

  
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 3389
        ToPort: 3389
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 443
        ToPort: 443
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort:   80
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        ToPort: 3306
   
  #RDSforTest:
   # Type: AWS::RDS::DBInstance
    #Properties:
     # AllocatedStorage: MySQL
      #DBSecurityGroups: !Ref SSHSecurityGroup
      #Engine: mysql
      #MasterUserPassword: 12345678
Outputs:
  SGOutput:
    Description: Output for Security Group
    Value: !Ref SSHSecurityGroup
    Export:
      Name: SGoutput
      
  Instanceoutput:
    Description: Output for EC2 instance
    Value: !Ref MyInstance
    Export: 
      Name: InstanceOutput

    
